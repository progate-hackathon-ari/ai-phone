// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/progate-hackathon-ari/backend/internal/entities/model"
)

func newConnectedPlayer(db *gorm.DB, opts ...gen.DOOption) connectedPlayer {
	_connectedPlayer := connectedPlayer{}

	_connectedPlayer.connectedPlayerDo.UseDB(db, opts...)
	_connectedPlayer.connectedPlayerDo.UseModel(&model.ConnectedPlayer{})

	tableName := _connectedPlayer.connectedPlayerDo.TableName()
	_connectedPlayer.ALL = field.NewAsterisk(tableName)
	_connectedPlayer.ConnectionID = field.NewString(tableName, "connection_id")
	_connectedPlayer.RoomID = field.NewString(tableName, "room_id")
	_connectedPlayer.Index = field.NewInt32(tableName, "index")
	_connectedPlayer.Username = field.NewString(tableName, "username")

	_connectedPlayer.fillFieldMap()

	return _connectedPlayer
}

type connectedPlayer struct {
	connectedPlayerDo connectedPlayerDo

	ALL          field.Asterisk
	ConnectionID field.String
	RoomID       field.String
	Index        field.Int32
	Username     field.String

	fieldMap map[string]field.Expr
}

func (c connectedPlayer) Table(newTableName string) *connectedPlayer {
	c.connectedPlayerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c connectedPlayer) As(alias string) *connectedPlayer {
	c.connectedPlayerDo.DO = *(c.connectedPlayerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *connectedPlayer) updateTableName(table string) *connectedPlayer {
	c.ALL = field.NewAsterisk(table)
	c.ConnectionID = field.NewString(table, "connection_id")
	c.RoomID = field.NewString(table, "room_id")
	c.Index = field.NewInt32(table, "index")
	c.Username = field.NewString(table, "username")

	c.fillFieldMap()

	return c
}

func (c *connectedPlayer) WithContext(ctx context.Context) *connectedPlayerDo {
	return c.connectedPlayerDo.WithContext(ctx)
}

func (c connectedPlayer) TableName() string { return c.connectedPlayerDo.TableName() }

func (c connectedPlayer) Alias() string { return c.connectedPlayerDo.Alias() }

func (c connectedPlayer) Columns(cols ...field.Expr) gen.Columns {
	return c.connectedPlayerDo.Columns(cols...)
}

func (c *connectedPlayer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *connectedPlayer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["connection_id"] = c.ConnectionID
	c.fieldMap["room_id"] = c.RoomID
	c.fieldMap["index"] = c.Index
	c.fieldMap["username"] = c.Username
}

func (c connectedPlayer) clone(db *gorm.DB) connectedPlayer {
	c.connectedPlayerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c connectedPlayer) replaceDB(db *gorm.DB) connectedPlayer {
	c.connectedPlayerDo.ReplaceDB(db)
	return c
}

type connectedPlayerDo struct{ gen.DO }

func (c connectedPlayerDo) Debug() *connectedPlayerDo {
	return c.withDO(c.DO.Debug())
}

func (c connectedPlayerDo) WithContext(ctx context.Context) *connectedPlayerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c connectedPlayerDo) ReadDB() *connectedPlayerDo {
	return c.Clauses(dbresolver.Read)
}

func (c connectedPlayerDo) WriteDB() *connectedPlayerDo {
	return c.Clauses(dbresolver.Write)
}

func (c connectedPlayerDo) Session(config *gorm.Session) *connectedPlayerDo {
	return c.withDO(c.DO.Session(config))
}

func (c connectedPlayerDo) Clauses(conds ...clause.Expression) *connectedPlayerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c connectedPlayerDo) Returning(value interface{}, columns ...string) *connectedPlayerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c connectedPlayerDo) Not(conds ...gen.Condition) *connectedPlayerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c connectedPlayerDo) Or(conds ...gen.Condition) *connectedPlayerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c connectedPlayerDo) Select(conds ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c connectedPlayerDo) Where(conds ...gen.Condition) *connectedPlayerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c connectedPlayerDo) Order(conds ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c connectedPlayerDo) Distinct(cols ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c connectedPlayerDo) Omit(cols ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c connectedPlayerDo) Join(table schema.Tabler, on ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c connectedPlayerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c connectedPlayerDo) RightJoin(table schema.Tabler, on ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c connectedPlayerDo) Group(cols ...field.Expr) *connectedPlayerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c connectedPlayerDo) Having(conds ...gen.Condition) *connectedPlayerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c connectedPlayerDo) Limit(limit int) *connectedPlayerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c connectedPlayerDo) Offset(offset int) *connectedPlayerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c connectedPlayerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *connectedPlayerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c connectedPlayerDo) Unscoped() *connectedPlayerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c connectedPlayerDo) Create(values ...*model.ConnectedPlayer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c connectedPlayerDo) CreateInBatches(values []*model.ConnectedPlayer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c connectedPlayerDo) Save(values ...*model.ConnectedPlayer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c connectedPlayerDo) First() (*model.ConnectedPlayer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectedPlayer), nil
	}
}

func (c connectedPlayerDo) Take() (*model.ConnectedPlayer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectedPlayer), nil
	}
}

func (c connectedPlayerDo) Last() (*model.ConnectedPlayer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectedPlayer), nil
	}
}

func (c connectedPlayerDo) Find() ([]*model.ConnectedPlayer, error) {
	result, err := c.DO.Find()
	return result.([]*model.ConnectedPlayer), err
}

func (c connectedPlayerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ConnectedPlayer, err error) {
	buf := make([]*model.ConnectedPlayer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c connectedPlayerDo) FindInBatches(result *[]*model.ConnectedPlayer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c connectedPlayerDo) Attrs(attrs ...field.AssignExpr) *connectedPlayerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c connectedPlayerDo) Assign(attrs ...field.AssignExpr) *connectedPlayerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c connectedPlayerDo) Joins(fields ...field.RelationField) *connectedPlayerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c connectedPlayerDo) Preload(fields ...field.RelationField) *connectedPlayerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c connectedPlayerDo) FirstOrInit() (*model.ConnectedPlayer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectedPlayer), nil
	}
}

func (c connectedPlayerDo) FirstOrCreate() (*model.ConnectedPlayer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ConnectedPlayer), nil
	}
}

func (c connectedPlayerDo) FindByPage(offset int, limit int) (result []*model.ConnectedPlayer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c connectedPlayerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c connectedPlayerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c connectedPlayerDo) Delete(models ...*model.ConnectedPlayer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *connectedPlayerDo) withDO(do gen.Dao) *connectedPlayerDo {
	c.DO = *do.(*gen.DO)
	return c
}
