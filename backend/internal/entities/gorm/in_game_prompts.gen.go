// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gorm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/progate-hackathon-ari/backend/internal/entities/model"
)

func newInGamePrompt(db *gorm.DB, opts ...gen.DOOption) inGamePrompt {
	_inGamePrompt := inGamePrompt{}

	_inGamePrompt.inGamePromptDo.UseDB(db, opts...)
	_inGamePrompt.inGamePromptDo.UseModel(&model.InGamePrompt{})

	tableName := _inGamePrompt.inGamePromptDo.TableName()
	_inGamePrompt.ALL = field.NewAsterisk(tableName)
	_inGamePrompt.RoomID = field.NewString(tableName, "room_id")
	_inGamePrompt.ConnectionID = field.NewString(tableName, "connection_id")
	_inGamePrompt.GameIndex = field.NewInt32(tableName, "game_index")
	_inGamePrompt.Prompt = field.NewString(tableName, "prompt")

	_inGamePrompt.fillFieldMap()

	return _inGamePrompt
}

type inGamePrompt struct {
	inGamePromptDo inGamePromptDo

	ALL          field.Asterisk
	RoomID       field.String
	ConnectionID field.String
	GameIndex    field.Int32
	Prompt       field.String

	fieldMap map[string]field.Expr
}

func (i inGamePrompt) Table(newTableName string) *inGamePrompt {
	i.inGamePromptDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inGamePrompt) As(alias string) *inGamePrompt {
	i.inGamePromptDo.DO = *(i.inGamePromptDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inGamePrompt) updateTableName(table string) *inGamePrompt {
	i.ALL = field.NewAsterisk(table)
	i.RoomID = field.NewString(table, "room_id")
	i.ConnectionID = field.NewString(table, "connection_id")
	i.GameIndex = field.NewInt32(table, "game_index")
	i.Prompt = field.NewString(table, "prompt")

	i.fillFieldMap()

	return i
}

func (i *inGamePrompt) WithContext(ctx context.Context) *inGamePromptDo {
	return i.inGamePromptDo.WithContext(ctx)
}

func (i inGamePrompt) TableName() string { return i.inGamePromptDo.TableName() }

func (i inGamePrompt) Alias() string { return i.inGamePromptDo.Alias() }

func (i inGamePrompt) Columns(cols ...field.Expr) gen.Columns {
	return i.inGamePromptDo.Columns(cols...)
}

func (i *inGamePrompt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inGamePrompt) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["room_id"] = i.RoomID
	i.fieldMap["connection_id"] = i.ConnectionID
	i.fieldMap["game_index"] = i.GameIndex
	i.fieldMap["prompt"] = i.Prompt
}

func (i inGamePrompt) clone(db *gorm.DB) inGamePrompt {
	i.inGamePromptDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inGamePrompt) replaceDB(db *gorm.DB) inGamePrompt {
	i.inGamePromptDo.ReplaceDB(db)
	return i
}

type inGamePromptDo struct{ gen.DO }

func (i inGamePromptDo) Debug() *inGamePromptDo {
	return i.withDO(i.DO.Debug())
}

func (i inGamePromptDo) WithContext(ctx context.Context) *inGamePromptDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inGamePromptDo) ReadDB() *inGamePromptDo {
	return i.Clauses(dbresolver.Read)
}

func (i inGamePromptDo) WriteDB() *inGamePromptDo {
	return i.Clauses(dbresolver.Write)
}

func (i inGamePromptDo) Session(config *gorm.Session) *inGamePromptDo {
	return i.withDO(i.DO.Session(config))
}

func (i inGamePromptDo) Clauses(conds ...clause.Expression) *inGamePromptDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inGamePromptDo) Returning(value interface{}, columns ...string) *inGamePromptDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inGamePromptDo) Not(conds ...gen.Condition) *inGamePromptDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inGamePromptDo) Or(conds ...gen.Condition) *inGamePromptDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inGamePromptDo) Select(conds ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inGamePromptDo) Where(conds ...gen.Condition) *inGamePromptDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inGamePromptDo) Order(conds ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inGamePromptDo) Distinct(cols ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inGamePromptDo) Omit(cols ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inGamePromptDo) Join(table schema.Tabler, on ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inGamePromptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inGamePromptDo) RightJoin(table schema.Tabler, on ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inGamePromptDo) Group(cols ...field.Expr) *inGamePromptDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inGamePromptDo) Having(conds ...gen.Condition) *inGamePromptDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inGamePromptDo) Limit(limit int) *inGamePromptDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inGamePromptDo) Offset(offset int) *inGamePromptDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inGamePromptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *inGamePromptDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inGamePromptDo) Unscoped() *inGamePromptDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inGamePromptDo) Create(values ...*model.InGamePrompt) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inGamePromptDo) CreateInBatches(values []*model.InGamePrompt, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inGamePromptDo) Save(values ...*model.InGamePrompt) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inGamePromptDo) First() (*model.InGamePrompt, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InGamePrompt), nil
	}
}

func (i inGamePromptDo) Take() (*model.InGamePrompt, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InGamePrompt), nil
	}
}

func (i inGamePromptDo) Last() (*model.InGamePrompt, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InGamePrompt), nil
	}
}

func (i inGamePromptDo) Find() ([]*model.InGamePrompt, error) {
	result, err := i.DO.Find()
	return result.([]*model.InGamePrompt), err
}

func (i inGamePromptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InGamePrompt, err error) {
	buf := make([]*model.InGamePrompt, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inGamePromptDo) FindInBatches(result *[]*model.InGamePrompt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inGamePromptDo) Attrs(attrs ...field.AssignExpr) *inGamePromptDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inGamePromptDo) Assign(attrs ...field.AssignExpr) *inGamePromptDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inGamePromptDo) Joins(fields ...field.RelationField) *inGamePromptDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inGamePromptDo) Preload(fields ...field.RelationField) *inGamePromptDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inGamePromptDo) FirstOrInit() (*model.InGamePrompt, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InGamePrompt), nil
	}
}

func (i inGamePromptDo) FirstOrCreate() (*model.InGamePrompt, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InGamePrompt), nil
	}
}

func (i inGamePromptDo) FindByPage(offset int, limit int) (result []*model.InGamePrompt, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inGamePromptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inGamePromptDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inGamePromptDo) Delete(models ...*model.InGamePrompt) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inGamePromptDo) withDO(do gen.Dao) *inGamePromptDo {
	i.DO = *do.(*gen.DO)
	return i
}
